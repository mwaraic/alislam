import React from 'react'
import { ExternalLink } from 'lucide-react'

// MinaratIcon component
const MinaratIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg 
    version="1.1" 
    xmlns="http://www.w3.org/2000/svg" 
    xmlnsXlink="http://www.w3.org/1999/xlink" 
    x="0px" 
    y="0px"
    width="100%" 
    viewBox="0 0 688 672" 
    enableBackground="new 0 0 688 672" 
    xmlSpace="preserve"
    {...props}
  >
    <path fill="currentColor" opacity="1.000000" stroke="none" 
      d="M311.468658,673.000000 C301.064819,671.099731 291.078613,669.431824 281.202820,667.261475 C217.879471,653.344727 163.142426,623.499390 117.408867,577.603638 C75.089317,535.133911 46.403332,484.667969 31.335163,426.586792 C23.940664,398.084259 20.197573,369.011719 21.020088,339.615021 C23.699139,243.865662 60.051662,163.062378 130.938950,98.517876 C178.172913,55.510292 233.799713,28.867270 296.946686,18.625496 C375.471405,5.889614 449.578613,18.998688 518.167419,59.397446 C589.143372,101.202171 637.957153,161.561005 664.615051,239.621216 C673.252258,264.913055 678.458435,290.900360 680.453064,317.591461 C686.666931,400.742035 665.405334,476.175018 615.371216,542.735718 C564.413757,610.524719 496.443665,652.180664 413.325592,669.032776 C406.161560,670.485291 398.900177,671.457520 391.341980,672.826416 C364.645782,673.000000 338.291534,673.000000 311.468658,673.000000 M668.980530,412.653748 C674.343689,387.329437 676.672485,361.762756 676.031067,335.851135 C675.208740,302.628265 669.734192,270.271759 658.689453,238.959534 C628.622681,153.719177 572.824158,90.972549 491.680237,51.512878 C429.841125,21.441010 364.452759,12.615320 296.601257,24.266987 C221.802429,37.111668 158.979614,72.225830 108.552429,128.690048 C63.719357,178.890457 37.274990,237.801208 29.075340,304.797272 C24.854305,339.285614 25.541103,373.665314 32.777050,407.570862 C52.971462,502.195984 104.438293,574.996521 187.691040,624.550964 C253.583206,663.771851 325.115387,676.161011 400.625641,665.383118 C440.544067,659.685425 478.213348,646.539368 513.018982,625.929749 C595.146118,577.299377 647.266479,506.581848 668.980530,412.653748z"/>
    <path fill="currentColor" opacity="1.000000" stroke="none" 
      d="M518.886475,90.053925 C569.285706,123.954102 606.730591,168.316467 630.919373,223.657867 C642.645996,250.487106 650.066589,278.548279 653.465149,307.686066 C660.518127,368.155212 651.101624,425.849579 623.801208,480.287842 C593.217651,541.272583 547.019958,586.907349 486.075073,617.528564 C468.640533,626.288391 450.487091,633.271423 431.681946,638.023743 C429.294647,636.227356 429.943237,633.887329 429.926758,631.828674 C429.745209,609.165588 429.620850,586.502014 429.502502,563.838501 C429.463440,556.354736 429.092163,555.926941 421.612762,555.891602 C387.454224,555.730103 353.295685,555.527832 319.136902,555.459717 C305.815491,555.433167 292.487732,556.511658 279.174835,555.392395 C274.590149,555.007019 273.229797,556.699524 273.239471,561.335510 C273.289520,585.326660 273.548798,609.326416 272.343811,633.303711 C272.269714,634.778198 272.544525,636.315613 271.516998,637.858276 C266.906006,637.464050 262.527740,635.802246 258.161377,634.336243 C174.539307,606.259644 113.619774,552.315430 75.401337,472.932709 C61.740055,444.557129 53.301727,414.511261 49.544792,383.167786 C39.133244,296.306183 61.421516,218.587784 116.470245,150.933151 C161.354706,95.770378 219.415482,60.799412 289.158783,46.456615 C364.046112,31.055939 435.109009,42.496788 501.939423,79.720589 C507.610321,82.879219 513.040283,86.470505 518.886475,90.053925 M451.406830,477.841919 C448.592468,485.376892 448.592468,485.381439 439.487457,485.382141 C379.322845,485.386749 319.158173,485.367645 258.993652,485.440826 C254.955719,485.445740 251.559586,485.427246 251.901367,479.951233 C252.009460,478.219330 250.838516,477.254700 248.997665,477.274323 C247.311920,477.292267 245.920929,477.953094 245.596863,479.615814 C245.218262,481.558380 245.132965,483.581726 245.130707,485.570312 C245.110031,503.736298 245.129532,521.902283 245.149826,540.068298 C245.157135,546.609497 245.172684,546.626160 251.810928,546.626526 C294.642822,546.628845 337.474701,546.620911 380.306580,546.621216 C404.139099,546.621338 427.972198,546.544373 451.803589,546.711731 C456.347412,546.743652 457.848022,545.295471 457.794800,540.674805 C457.570343,521.178040 457.622772,501.676788 457.753540,482.178375 C457.782227,477.904022 456.339661,476.237518 451.406830,477.841919 M347.114288,106.834717 C348.585266,111.236343 348.603271,115.726929 347.251038,120.083221 C346.606354,122.160233 346.905212,123.835754 347.349609,125.833946 C348.359100,130.372757 349.093201,134.955566 345.986572,139.230927 C344.220581,141.661346 343.953308,144.618790 345.527039,147.272476 C347.085205,149.899933 346.214996,151.395569 344.045929,153.080719 C339.526428,156.591858 336.631958,161.402542 335.821350,166.955383 C335.234650,170.974625 333.267151,172.314896 329.738007,173.457703 C290.246277,186.246033 270.674500,223.699219 277.898865,261.232422 C278.846100,266.153870 280.988525,267.807098 285.927917,267.729004 C312.084778,267.315247 338.245758,267.124786 364.405975,266.970825 C381.571503,266.869781 398.738159,266.971039 415.904327,266.962982 C423.459015,266.959442 423.561737,266.656494 424.737457,259.414398 C426.244781,250.129883 426.412445,240.782898 425.526672,231.517548 C424.024445,215.803604 418.299347,201.870819 406.408875,190.893600 C396.749542,181.976120 385.340607,176.381638 372.803223,172.977036 C369.570770,172.099243 367.707642,170.870804 367.123932,167.258362 C366.194763,161.508026 363.243744,156.639023 358.665253,152.942139 C356.737274,151.385391 355.908569,150.025497 357.212738,147.481003 C358.828247,144.329025 358.699615,140.958908 356.272034,138.117279 C354.698486,136.275391 354.584808,134.183472 354.706909,132.011444 C354.919769,128.224655 355.849091,124.362259 355.359070,120.680489 C354.714264,115.835648 354.517883,111.190536 355.459869,106.364029 C356.384216,101.628021 354.820953,97.412201 351.304260,93.177689 C348.177307,97.474754 346.512360,101.421089 347.114288,106.834717 M310.517181,376.588470 C319.334900,376.430634 328.152374,376.155884 336.970398,376.136536 C364.937836,376.075195 392.905548,376.123230 420.873138,376.095886 C427.516937,376.089417 427.704346,375.917694 427.635925,369.467499 C427.454102,352.327301 427.103088,335.188141 427.048859,318.047882 C427.035248,313.746887 425.559509,312.253021 421.211578,312.263458 C374.432587,312.375763 327.653198,312.364410 280.874115,312.271057 C276.890167,312.263123 275.233826,313.371094 275.274261,317.646606 C275.440979,335.291077 275.457306,352.940521 275.195831,370.583160 C275.127838,375.171936 277.192505,376.704742 281.085114,376.364349 C290.584290,375.533722 300.045746,376.905304 310.517181,376.588470 M286.851135,450.581268 C285.728851,440.661865 290.461182,432.832550 296.099335,425.459473 C305.884644,412.663055 303.997681,414.872955 312.311768,425.009796 C313.365814,426.294891 314.283875,427.693542 315.236969,429.059113 C319.546844,435.234161 322.006958,441.833038 321.466797,449.624420 C320.972382,456.755768 321.564819,463.956207 321.291718,471.111420 C321.112061,475.818176 323.741180,476.177917 327.295990,476.085022 C330.728180,475.995300 334.087616,476.430115 333.913239,471.187866 C333.669678,463.863708 334.021698,456.520660 333.820129,449.193939 C333.425903,434.863770 342.809418,425.924591 351.574677,415.378815 C360.035278,425.791077 369.145630,434.736816 369.082123,448.717468 C369.050323,455.716370 369.163727,462.717682 369.013611,469.713684 C368.922821,473.946045 370.163483,476.170746 374.960693,476.163330 C379.515991,476.156281 381.250458,474.499695 381.090454,470.006592 C380.877075,464.015106 381.448181,457.977020 380.962311,452.017670 C379.796326,437.716644 388.114990,427.919556 396.405426,418.030823 C397.446198,416.789429 398.850830,415.861176 400.205170,417.430573 C407.711121,426.128357 415.817535,434.586517 416.156647,447.081207 C416.373596,455.074188 416.184906,463.077759 416.221558,471.076385 C416.230774,473.083252 416.257050,475.038513 418.748383,475.937439 C424.436584,477.989838 428.704041,475.269379 428.628479,469.308319 C428.387695,450.318115 427.935516,431.329681 427.847107,412.339264 C427.825592,407.716797 426.181366,406.308380 421.684845,406.319672 C375.024811,406.436798 328.364288,406.428406 281.704102,406.344391 C277.251404,406.336395 275.032532,407.558624 274.802277,412.485779 C273.891541,431.975922 274.673492,451.471680 274.243439,470.957245 C274.152954,475.056702 275.959320,476.240845 279.625061,476.083313 C283.151367,475.931793 286.941040,476.517731 286.845367,471.056641 C286.731537,464.559784 286.839172,458.059052 286.851135,450.581268 M397.499939,302.652527 C415.825531,302.652985 434.151215,302.672058 452.476654,302.623199 C454.190094,302.618622 456.243622,303.323425 457.387115,301.186798 C459.210480,297.779877 457.264984,291.369537 453.789337,289.649841 C446.028137,285.809723 438.212433,282.079224 430.465424,278.210938 C427.866394,276.913147 425.231445,276.311707 422.313904,276.314606 C375.000610,276.361938 327.687317,276.356293 280.373993,276.337341 C277.675964,276.336243 275.130157,276.609955 272.646484,277.871307 C264.776978,281.867950 256.917969,285.903442 248.892120,289.567444 C243.827866,291.879364 245.011307,296.067871 245.285599,299.855652 C245.593643,304.109650 249.239944,302.596497 251.561340,302.600220 C299.874115,302.677765 348.187012,302.655029 397.499939,302.652527 M319.500061,382.363831 C303.183441,382.367157 286.866669,382.335358 270.550232,382.390778 C263.794617,382.413727 261.374878,384.814331 261.349487,391.178070 C261.320465,398.454590 263.728790,400.642914 271.977020,400.644989 C324.922760,400.658203 377.868469,400.652252 430.814209,400.648651 C431.978943,400.648560 433.212433,400.842560 434.296051,400.533264 C438.254242,399.403351 441.748901,398.027649 441.713074,392.709686 C441.659454,384.756256 439.599945,382.381409 431.386444,382.375488 C394.424316,382.348938 357.462219,382.364105 319.500061,382.363831z"/>
    <path fill="currentColor" opacity="1.000000" stroke="none" 
      d="M353.574463,319.092194 C375.415192,322.088623 381.345306,344.409454 372.671387,357.961792 C366.377319,367.795776 353.717407,372.138977 342.896118,368.107666 C331.951233,364.030304 324.756561,352.623505 326.358887,341.888702 C328.345734,328.577393 337.602051,319.823242 350.661224,318.931244 C351.486084,318.874908 352.322540,318.988342 353.574463,319.092194 M355.668457,347.544922 C352.608429,343.803375 353.184265,338.856995 351.329956,334.573334 C350.438385,337.598755 349.368073,340.700439 349.781006,343.590179 C350.182129,346.397552 352.500122,348.416809 355.668457,347.544922z"/>
  </svg>
)

interface LinkRendererProps {
  href?: string
  children: React.ReactNode
  onOpenWebView?: (url: string) => void
}

const isGoogleMapsUrl = (url: string): boolean => {
  return /google\.com\/maps|goo\.gl\/maps|maps\.google\.com/i.test(url)
}

const isAlislamBookUrl = (url: string): boolean => {
  return /new\.alislam\.org\/library\/books\/.*(?:\?option=options&)?page=\d+/i.test(url)
}

const getGoogleMapsEmbedUrl = (url: string): string => {
  try {
    // Extract coordinates
    const coordMatch = url.match(/@(-?\d+\.\d+),(-?\d+\.\d+)/)
    if (coordMatch) {
      const [, lat, lng] = coordMatch
      return `https://www.google.com/maps/embed/v1/place?key=AIzaSyAQoQrPy0irLVtpdAuFR_s9V2JB7Xr9Bx0&q=${lat},${lng}`
    }
    
    // Extract place name
    const placeMatch = url.match(/place\/([^\/]+)/)
    if (placeMatch) {
      const placeName = decodeURIComponent(placeMatch[1].split('@')[0].replace(/\+/g, ' '))
      return `https://www.google.com/maps/embed/v1/place?key=AIzaSyAQoQrPy0irLVtpdAuFR_s9V2JB7Xr9Bx0&q=${encodeURIComponent(placeName)}`
    }
    
    // Extract search query
    const queryMatch = url.match(/[?&]q=([^&]+)/)
    if (queryMatch) {
      const query = decodeURIComponent(queryMatch[1])
      return `https://www.google.com/maps/embed/v1/place?key=AIzaSyAQoQrPy0irLVtpdAuFR_s9V2JB7Xr9Bx0&q=${encodeURIComponent(query)}`
    }
    
    // Extract directions
    const dirMatch = url.match(/dir\/([^\/]+)\/([^\/]+)/)
    if (dirMatch) {
      const [, origin, destination] = dirMatch
      return `https://www.google.com/maps/embed/v1/directions?key=AIzaSyAQoQrPy0irLVtpdAuFR_s9V2JB7Xr9Bx0&origin=${encodeURIComponent(origin)}&destination=${encodeURIComponent(destination)}`
    }
    
    return ''
  } catch (error) {
    return ''
  }
}

export function LinkRenderer({ href, children, onOpenWebView }: LinkRendererProps) {
  if (!href) return <span>{children}</span>

  const isGoogleMaps = isGoogleMapsUrl(href)
  const isAlislamBook = isAlislamBookUrl(href)
  const embedUrl = isGoogleMaps ? getGoogleMapsEmbedUrl(href) : ''

  // For Alislam book links, render as icon and open in web view
  if (isAlislamBook) {
    return (
      <a
        href={href}
        onClick={e => {
          if (onOpenWebView) {
            e.preventDefault()
            onOpenWebView(href)
          }
        }}
        className="inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors cursor-pointer"
        title={children?.toString() || href}
      >
        <MinaratIcon className="h-5 w-5 flex-shrink-0" />
      </a>
    )
  }

  return (
    <div className="my-2">
      <a 
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="inline-flex items-center gap-1 text-primary hover:underline break-all"
      >
        {children}
        <ExternalLink className="h-3 w-3 flex-shrink-0" />
      </a>
      
      {isGoogleMaps && embedUrl && (
        <div className="mt-3 rounded-lg overflow-hidden border border-border">
          <iframe
            src={embedUrl}
            width="100%"
            height="300"
            style={{ border: 0 }}
            allowFullScreen
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
            title="Google Maps"
            className="w-full"
          />
        </div>
      )}
    </div>
  )
} 